diff --git a/.env.sample b/.env.sample
index d2a8d60..7939458 100644
--- a/.env.sample
+++ b/.env.sample
@@ -65,6 +65,13 @@ AUTH0_ISSUER=
 AUTH0_CLIENT_SECRET=
 AUTH0_CLIENT_ID=
 
+# Authelia
+NEXT_PUBLIC_AUTHELIA_ENABLED=""
+AUTHELIA_CLIENT_ID=""
+AUTHELIA_CLIENT_SECRET=""
+AUTHELIA_WELLKNOWN_URL=""
+
+
 # Authentik
 NEXT_PUBLIC_AUTHENTIK_ENABLED=
 AUTHENTIK_CUSTOM_NAME=
diff --git a/.github/workflows/release-container.yml b/.github/workflows/release-container.yml
index e994913..8297bf6 100644
--- a/.github/workflows/release-container.yml
+++ b/.github/workflows/release-container.yml
@@ -3,7 +3,7 @@ name: Create and publish a container image on release
 on:
   push:
     tags:
-      - "*"
+      - '*'
 
 env:
   REGISTRY: ghcr.io
diff --git a/Dockerfile b/Dockerfile
index a6d6129..c313637 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -2,12 +2,14 @@ FROM node:18.18-bullseye-slim
 
 ARG DEBIAN_FRONTEND=noninteractive
 
-RUN mkdir /data
+RUN mkdir -p /data /playwright
 
 WORKDIR /data
 
 COPY ./package.json ./yarn.lock ./playwright.config.ts ./
 
+ENV PLAYWRIGHT_BROWSERS_PATH=/playwright
+
 # Increase timeout to pass github actions arm64 build
 RUN --mount=type=cache,sharing=locked,target=/usr/local/share/.cache/yarn yarn install --network-timeout 10000000
 
@@ -17,7 +19,11 @@ RUN npx playwright install-deps && \
 
 COPY . .
 
-RUN yarn prisma generate && \
-    yarn build
+RUN  \
+    yarn prisma generate && \
+    yarn build && \
+    chgrp -R 0 /data && \
+    chmod -R g+rwX /data && \
+    umask 022
 
 CMD yarn prisma migrate deploy && yarn start
diff --git a/docker-compose.yml b/docker-compose.yml
index 63a8740..487ca25 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -12,7 +12,7 @@ services:
       - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
     restart: always
     # build: . # uncomment this line to build from source
-    image: ghcr.io/linkwarden/linkwarden:latest # comment this line to build from source
+    image: ghcr.io/chrisbsmith/linkwarden:latest # comment this line to build from source
     ports:
       - 3000:3000
     volumes:
diff --git a/pages/api/v1/auth/[...nextauth].ts b/pages/api/v1/auth/[...nextauth].ts
index d7549de..53c2588 100644
--- a/pages/api/v1/auth/[...nextauth].ts
+++ b/pages/api/v1/auth/[...nextauth].ts
@@ -97,19 +97,19 @@ if (
         const user = await prisma.user.findFirst({
           where: emailEnabled
             ? {
-                OR: [
-                  {
-                    username: username.toLowerCase(),
-                  },
-                  {
-                    email: username?.toLowerCase(),
-                  },
-                ],
-                emailVerified: { not: null },
-              }
+              OR: [
+                {
+                  username: username.toLowerCase(),
+                },
+                {
+                  email: username?.toLowerCase(),
+                },
+              ],
+              emailVerified: { not: null },
+            }
             : {
-                username: username.toLowerCase(),
-              },
+              username: username.toLowerCase(),
+            },
         });
 
         let passwordMatches: boolean = false;
@@ -239,6 +239,37 @@ if (process.env.NEXT_PUBLIC_AUTH0_ENABLED === "true") {
   };
 }
 
+// Authelia
+if (process.env.NEXT_PUBLIC_AUTHELIA_ENABLED === "true") {
+  providers.push(
+    {
+      id: "authelia",
+      name: "Authelia",
+      type: "oauth",
+      clientId: process.env.AUTHELIA_CLIENT_ID!,
+      clientSecret: process.env.AUTHELIA_CLIENT_SECRET!,
+      wellKnown: process.env.AUTHELIA_WELLKNOWN_URL!,
+      authorization: { params: { scope: "openid email profile" } },
+      idToken: true,
+      checks: ["pkce", "state"],
+      profile(profile) {
+        return {
+          id: profile.sub,
+          name: profile.name,
+          email: profile.email,
+          username: profile.preferred_username,
+        }
+      },
+    }
+  );
+
+  const _linkAccount = adapter.linkAccount;
+  adapter.linkAccount = (account) => {
+    const { "not-before-policy": _, refresh_expires_in, ...data } = account;
+    return _linkAccount ? _linkAccount(data) : undefined;
+  };
+}
+
 // Authentik
 if (process.env.NEXT_PUBLIC_AUTHENTIK_ENABLED === "true") {
   providers.push(
diff --git a/pages/api/v1/logins/index.ts b/pages/api/v1/logins/index.ts
index 34b3aaf..bdf6588 100644
--- a/pages/api/v1/logins/index.ts
+++ b/pages/api/v1/logins/index.ts
@@ -391,10 +391,17 @@ export function getLogins() {
       name: process.env.ZOOM_CUSTOM_NAME ?? "Zoom",
     });
   }
+  // Authelia
+  if (process.env.NEXT_PUBLIC_AUTHELIA_ENABLED === "true") {
+    buttonAuths.push({
+      method: "authelia",
+      name: process.env.AUTHELIA_CUSTOM_NAME ?? "Authelia",
+    });
+  }
   return {
     credentialsEnabled:
       process.env.NEXT_PUBLIC_CREDENTIALS_ENABLED === "true" ||
-      process.env.NEXT_PUBLIC_CREDENTIALS_ENABLED === undefined
+        process.env.NEXT_PUBLIC_CREDENTIALS_ENABLED === undefined
         ? "true"
         : "false",
     emailEnabled:
diff --git a/types/enviornment.d.ts b/types/enviornment.d.ts
index 58d74c5..ed73396 100644
--- a/types/enviornment.d.ts
+++ b/types/enviornment.d.ts
@@ -66,6 +66,13 @@ declare global {
       AUTH0_CLIENT_SECRET?: string;
       AUTH0_CLIENT_ID?: string;
 
+      // Authelia
+      NEXT_PUBLIC_AUTHELIA_ENABLED?: string;
+      AUTHELIA_CUSTOM_NAME?: string;
+      AUTHELIA_CLIENT_ID?: string;
+      AUTHELIA_CLIENT_SECRET?: string;
+      AUTHELIA_WELLKNOWN_URL?: string;
+
       // Authentik
       NEXT_PUBLIC_AUTHENTIK_ENABLED?: string;
       AUTHENTIK_CUSTOM_NAME?: string;
@@ -400,4 +407,4 @@ declare global {
   }
 }
 
-export {};
+export { };
